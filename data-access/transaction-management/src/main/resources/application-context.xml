<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 1. Data Source Configuration (using H2 in-memory database) -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <!-- Run a script to create our tables on startup -->
        <property name="url" value="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:schema.sql'"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!-- 2. Service Beans -->
    <bean id="auditService" class="com.example.ecommerce.services.AuditServiceImpl">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="inventoryService" class="com.example.ecommerce.services.InventoryServiceImpl">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="orderService" class="com.example.ecommerce.services.OrderServiceImpl">
        <constructor-arg ref="dataSource"/>
        <constructor-arg ref="auditService"/>
        <constructor-arg ref="inventoryService"/>
    </bean>

    <!-- 3. Transaction Manager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 4. Transactional Advice -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- For OrderService -->
            <tx:method name="placeOrder" propagation="REQUIRED" isolation="READ_COMMITTED"/>

            <!-- For AuditService: Run in a completely new transaction -->
            <tx:method name="logEvent" propagation="REQUIRES_NEW"/>

            <!-- For InventoryService: Run in a nested transaction -->
            <tx:method name="reserveStock" propagation="NESTED"/>

            <!-- For ReportingService (if we were to implement it) -->
            <tx:method name="getLiveSalesTrend" isolation="READ_UNCOMMITTED" read-only="true"/>
            <tx:method name="getCurrentInventoryReport" isolation="READ_COMMITTED" read-only="true"/>
            <tx:method name="verifyOrderConsistency" isolation="REPEATABLE_READ" read-only="true"/>
            <tx:method name="finalizeMonthlyFinancials" isolation="SERIALIZABLE"/>

            <!-- Default for all other methods -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 5. AOP Configuration to apply the advice -->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.example.ecommerce.services.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

</beans>
